application:
  interfaces:
    output: 
      str: bind(workflow#result.str)
      int: bind(workflow#result.int)
      obj: bind(workflow#result.obj)
  components:
    workflow:
      type: workflow.Instance
      interfaces:
        result:
          str: publish-signal(string)
          int: publish-signal(int)
          obj: publish-signal(object)
        test-marker:
          test-marker: consume-signal(unit)
        properties:
          sample-property-str: consume-signal(string)
          sample-property-int: consume-signal(int)
          sample-property-obj: consume-signal(object)
      required: [test-marker, properties]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            parameters: []
            steps:
              - get-env-props:
                  action: getEnvironmentProperties
                  parameters:
                    phase: get-env-props
                  output:
                    props: result
            return:
              str:
                value: "{$.props.properties.sample-property-str}"
              int:
                value: "{$.props.properties.sample-property-int}"
              obj:
                value: "{$.props.properties.sample-property-obj}"
          destroy:
            steps: []
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
          execute-command:  send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)
    marker:
      type: reference.Service
      interfaces:
        test-marker:
          test-marker: publish-signal(unit)
    props:
      type: reference.Service
      interfaces:
        properties:
          sample-property-str: publish-signal(string)
          sample-property-int: publish-signal(int)
          sample-property-obj: publish-signal(object)
  bindings:
      - [workflow, wfService]
      - [workflow, marker]
      - [workflow, props]
